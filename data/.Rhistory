# Set working directory
setwd("C:\\Users\\siyot\\OneDrive\\Desktop\\Khuliso\\prescient-coding-challenge-2024\\data")
# Load necessary data
data0 <- read.csv("data0.csv")
data1 <- read.csv("data1.csv")
returns <- read.csv("returns.csv")
# Convert date columns to Date type
data1$date <- as.Date(data1$date)
returns$date <- as.Date(returns$date)
# Define the training and testing periods
start_train <- as.Date("2017-01-01")
end_train <- as.Date("2023-12-30")
start_test <- as.Date("2024-01-01")
end_test <- as.Date("2024-06-30")
# Split the data into in-sample (training) and out-of-sample (testing) periods
in_sample_data <- data1[data1$date >= start_train & data1$date <= end_train, ]
out_of_sample_data <- data1[data1$date >= start_test & data1$date <= end_test, ]
# Calculate momentum for each security based on daily price changes (in-sample)
in_sample_data$momentum <- NA
# Loop through each unique security in the in-sample data
unique_securities <- unique(in_sample_data$security)
for (security in unique_securities) {
# Get the price data for the current security
security_data <- in_sample_data[in_sample_data$security == security, ]
# Calculate momentum: (price / lag(price) - 1) * 100
security_data$momentum <- c(NA, diff(security_data$price) / head(security_data$price, -1) * 100)
# Assign the calculated momentum back to the original in-sample data
in_sample_data[in_sample_data$security == security, "momentum"] <- security_data$momentum
}
# Generate buy signals for in-sample data
generate_buy_signals <- function(data) {
# Initialize buy matrix with zeros
buy_matrix <- matrix(0, nrow = length(unique(data$date)), ncol = length(unique(data$security)))
rownames(buy_matrix) <- unique(data$date)
colnames(buy_matrix) <- unique(data$security)
# Loop through each date in the in-sample data
for (date in unique(data$date)) {
daily_data <- data[data$date == date, ]
# Order securities by momentum and select top 10
top_stocks <- head(daily_data[order(-daily_data$momentum), "security"], 10)
# Mark buy signals in the matrix
buy_matrix[date, top_stocks] <- 1
}
return(buy_matrix)
}
# Generate buy signals for in-sample data
buy_matrix_in_sample <- generate_buy_signals(in_sample_data)
